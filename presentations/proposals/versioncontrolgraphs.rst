=========================
Mercurial, Git and Graphs
=========================

Talk Outline
============

The aim of this talk is to introduce and explain some advanced concepts
associated with distributed version control systems like Hg and Git.

Many open source projects have migrated to Git or Hg. CPython itself uses
mercurial for development. Understanding version control software well can help
improve developer productivity and make one feel comfortable working on large
projects.

Understanding the graph manipulation concepts also encourage experimentation
and remove the fear of making mistakes, while using these DVCS software.

This talk will present those concepts with mercurial and git, and suggest
work flows which developers can adopt when working on projects at any scale.

It's all about mastering the version control graphs.

Details of the Talk
===================


Mercurial
---------

Let's look at CPython and PyPy as both of them use mercurial.

Cpython has the one default repository as the main codeline and then bug fix
versions are 'branches' of this default repo. Managing branches was considered
easier than creating repos for individual release branches. Having a workflow
such as starting from 2.7, 3.2, 3.3 bug-fix branch and then pushing the changes
to the default branch, ensures that CPython's development requirements is met
consistently and bug-fixes can be tracked across branches.

We shall also look at certain hooks which mercurial enables which aid in
development when working with various branches, which can have sufficiently
diverging files for e.g 2.7 and 3.3 branches in the same repository. We can
write mercurial hooks which can help us to keep the build files separately for
each branch and those builds can get activated as we switch branches.

Another feature of Cpython Tracker should be noted, where a Patch can be
submitted by pointing to any external hg repo ( like bitbucket) and the latest
patch against the default will be generated by the tracker. This will enable
the submitter to adopt feedback on his patch easily.

Editing History with hg
-----------------------

A good section of this talk would discuss the facilities available with editing
history / manipulating hg graph, which is extremely useful for work in progress.

* mq extension and workflow can be adopted while using mq extension.

Hg rebase command and hg interactive rebase which should be available in latest
version of hg would be introduced.

Hg Extensions.
-------------
* Exploring hg extensions and is it easy to write an hg extension? (Yes, it is.)

Git
===

Git has become an extremely popular version control system and being adopted
in enterprises and startups. One major difference in Git architecture is
the 3 level graph with the staging area that Git provides  This helps a lot in
making quick changes and have high control on commits.

Git's extremely cheap branching strategy, rebasing the commits helps with
experimenting and playing around with the code.

This section will explain how Git works and how git graph changes when
branching, merging and rebasing.

What strategies can be adopted by teams so that merges can be enforced as
fast-forward only merges to the master and the value of maintaining a linear
history in the master.

I would also list the Git workflow process at Twitter. How Twitter manages both
code both internally and at externally using Git.

Hg and Git Survey
-----------------

This is an interesting part, where in I plan to present some survey results of
open source projects which are using Git / Mercurial and their thoughts on each
of the system.

About Speaker
------------

Senthil Kumaran is a CPython core developer, contributing to standard library
of Python. He works as Software Engineer with Twitter, mostly writing build
related software. http://www.uthcode.com is his programming site.

References
-----------
* http://www.uthcode.com 
* http://hg.python.org
* http://git-scm.com/book
* http://marakana.com/s/advanced_git_graphs__hashes__compression_matthew_mccullough_github,1280/index.html
* http://twitter.github.com
