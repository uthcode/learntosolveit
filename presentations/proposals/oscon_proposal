Python 3 Language Changes and How to port your application to Python 3
======================================================================

Python 3 language is ready and number of existing applications are being ported
to Python3. This is a good time to learn and equip yourself with new language
features, be aware of it's backward incompatible changes and appreciate its
more consistent and symmetric design.

Now is the right time to port your existing Python2 application to Python3.  If
you can't do it right away, then plan for a migration strategy and write code
which is future proof.

This tutorial will teach you all these techniques.

This tutorial focusses on the differences between Python2 and Python3, it
illustrates the major improvements and the language changes that has gone into
Python3. A major portion of this tutorial will cover the topic of porting a
Python2 application to Python3, the pitfalls to look for and strategies to deal
with the issues encountered during porting.

A small set of python snippets will be made avaiable and as an exercise, the
audience can covert these to Python3 and learn from that experience.

Following is a brief outline for this tutorial.

* Python3 Language changes.

# Python3 Syntax changes - Getting used to it.
# Language Improvements. Iterators and Generators are everywhere.
# Standard Library Reorganization.
# Unicode Strings. A significant amount of time will be spent on this topic with lot of illustrations, example snippets and exercises.
# Python 3 IO - Dealing with Files and File like objects in Python3. This would also involve sockets and some amount of network programming.

* How to Solve it using Python3.

# Introduction to some some advanced programming techniques using Python3 features such as iterators and collections module in stdlib.
# Cookbook style recipes focussing on Network programming and web programming.

* Porting your code to Python3.

# Use of 2to3 Source code translator. 
# How to verify your translated code.
# How to handle issues which arise due to String to Bytes Coversion. Dealing with 8bit strings and Unicode strings in a 'meaningful way'.
# Planning a migration strategy if your porting your application is non-trivial. 
# Writing and maintaining code which is future-safe.

* Case study: Porting an existing Python2 library to Python3.

# Illustrations from DiveintoPython3.org's case-study of porting chardet to Python3.


I also hope that this tutorial will help developers to clarify their doubts
with Python3 migration of their existing python2 apps and packages.

http://us.pycon.org/2011/schedule/presentations/21/
http://us.pycon.org/2011/schedule/presentations/274/
http://us.pycon.org/2011/schedule/presentations/122/
http://us.pycon.org/2011/schedule/presentations/259/
http://us.pycon.org/2011/schedule/presentations/260/

